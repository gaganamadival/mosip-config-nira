import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.Period;
import java.util.List;
import java.time.ZoneId;
import java.time.temporal.ValueRange;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

String CHILD = "INFANT";
String ADULT = "ADULT";
String MINOR = "MINOR";
String MALE = 'MLE';
String FEMALE = 'FLE';
String NonResident = "FRN";
String Resident = "UGA";
String Others = "OTH";

String New = 	 "NEW";
String Renewal = "RENEWAL";
String Lost= 	 "LOST";
String Update =  "UPDATE";
String FirstID = "FIRSTID";

String dualCitizenship= "DLN";
String ByBirthIndigenousCommunity = "CBBI";
String ByNaturalisation = "NAT";
String ByRegistration = "CBREG";
String ByArticleNine = "CUAN";

String fatherNIN;
String motherNIN;

String DATE_PATTERN = "dd/MM/yyyy";
String regex = "^([0-2][0-9]|(3)[0-1])(\\/)(((0)[1-9])|((1)[0-2]))(\\/)(\\d{4})$";
Pattern pattern = Pattern.compile(regex);

def isUpdateFlow(identity) {
  Object val = identity.getOrDefault('_flow', null);
  return (val == 'Update') ? true : false;
}

def getResidenceStatus(identity) {
    if(identity.containsKey('residenceStatusCode')) {
        return identity.getOrDefault('residenceStatusCode', null);
    }

    if(identity.containsKey('residenceStatus')) {
        Object val = identity.getOrDefault('residenceStatus', null);
        return val == null ? null :
            (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }

    return null;
}

def getUserCase(identity) {
     if(identity.containsKey('userService')) {
        Object val = identity.getOrDefault('userService', null);
          System.out.println("userService" + val);
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }

    if(identity.containsKey('userCase')) {
        Object val = identity.getOrDefault('userCase', null);
          System.out.println("userCase" + val);
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}

def getCitizenhipType(identity) {
     if(identity.containsKey('applicantCitizenshipTypeCode')) {
        Object val = identity.getOrDefault('applicantCitizenshipTypeCode', null);
        System.out.println("getCitizenhipType" + val);
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    } 

    if (identity.containsKey('userServiceType')) {
        Object val = identity.getOrDefault('userServiceType', null);
        System.out.println("userServiceType" + val);
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}

def getCitizenhipTypeCode(identity) {
    if (identity.containsKey('userServiceTypeCode')) {
        Object val = identity.getOrDefault('userServiceTypeCode', null);
        System.out.println("userServiceTypeCode: " + val);
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
	
    return null;
}

def getFatherNIN(identity) {
     if(identity.containsKey('fatherNIN')) {
        Object val = identity.getOrDefault('fatherNIN', null);
    
        return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}

def getMotherNIN(identity) {
     if(identity.containsKey('motherNIN')) {
        Object val = identity.getOrDefault('motherNIN', null);
          return val == null ? null : (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }
    return null;
}

def getFoundLink( identity) {
    if (identity.containsKey("foundLink")) {
        Object val = identity.getOrDefault("foundLink", null);
        return val == null ? false : (val instanceof String ? ; (val == "Y" ? true : false) : val);
    }
    return false;
}

def getCOPServiceValue(identity, service) {
    if (identity.containsKey(service)) {
        Object val = identity.getOrDefault(service, null);
        System.out.println(service + ": " + val);
        return val == null ? false : (val instanceof String ? ; (val == "Y" ? true : false) : val);
    }
	
    return false;
}

def getGenderType(identity) {
    if(identity.containsKey('genderCode')) {
        return identity.getOrDefault('genderCode', null);
    }

    if(identity.containsKey('gender')) {
        Object val = identity.getOrDefault('gender', null);
        return val == null ? null :
            (val instanceof String ? ; (String)val : (String) ((List)val).get(0).value);
    }

    return null;
}

def getAgeCode(identity) {
    if(ageGroups == null || !identity.containsKey('dateOfBirth'))
        return null;

    String dob = identity.get('dateOfBirth');
    if(!pattern.matcher(dob).matches())
        return null;
        
    LocalDate date = LocalDate.parse(dob, DateTimeFormatter.ofPattern(DATE_PATTERN));
    LocalDate currentDate = LocalDate.now(ZoneId.of("UTC"));
    
    if(date.isAfter(currentDate)) { return 'KER-MSD-151'; }
    
    int ageInYears = Period.between(date, currentDate).getYears();
    
    String ageGroup = null;
    for(String groupName : ageGroups.keySet()) {
        String[] range = ((String)ageGroups.get(groupName)).split('-');
        if(ValueRange.of(Long.valueOf(range[0]), Long.valueOf(range[1])).isValidIntValue(ageInYears)) {
            ageGroup = groupName;
        }
    }

   return ageGroup == null ? null : ageGroup;
}

def getAgeCop(identity) {
    if(!identity.containsKey('dateOfBirthCop'))
        return null;

    String dobcop = identity.get('dateOfBirthCop');
    if(!pattern.matcher(dobcop).matches())
        return null;
        
    LocalDate date = LocalDate.parse(dobcop, DateTimeFormatter.ofPattern(DATE_PATTERN));
    LocalDate currentDate = LocalDate.now(ZoneId.of("UTC"));
    
    if(date.isAfter(currentDate)) { return 'KER-MSD-151'; }
    
    int ageInYears = Period.between(date, currentDate).getYears();

   return ageInYears == null ? null : ageInYears;
}

def getBioExceptionFlag(identity) {
    if(!identity.containsKey('isBioException')) { return false; }
    Object val = identity.getOrDefault('isBioException', null);
    return (val == 'true') ? true : (( val == 'false' ) ? false : null);
}

def getApplicantType() {
  String itc = getResidenceStatus(identity);
  String genderType = getGenderType(identity);
  int ageCop = getAgeCop(identity);
  String ageCode = getAgeCode(identity);
  boolean isBioExPresent = getBioExceptionFlag(identity);

  String citizenshipType= getCitizenhipType(identity);
  String citizenshipTypeCode = getCitizenhipTypeCode(identity);
  String userCase= getUserCase(identity);
  String motherNIN= getMotherNIN(identity);
  String fatherNIN= getFatherNIN(identity);
  boolean foundLink=getFoundLink(identity);
  boolean addingName= getCOPServiceValue(identity, 'addingName');
  boolean removingName = getCOPServiceValue(identity, 'removingName');
  boolean changeOrderOfNames= getCOPServiceValue(identity, 'changeOrderOfNames');
  boolean completeChangeofName= getCOPServiceValue(identity, 'completeChangeofName');
  boolean changeOfDateOfBirth = getCOPServiceValue(identity, 'changeOfDateOfBirth');
  boolean changeInPlaceOfResidence = getCOPServiceValue(identity, 'changeInPlaceOfResidence');
  boolean changeInPlaceOfBirth = getCOPServiceValue(identity, 'changeInPlaceOfBirth');
  boolean changeInPlaceOfOrigin = getCOPServiceValue(identity, 'changeInPlaceOfOrigin');
  boolean changeInCitizenshipType = getCOPServiceValue(identity, 'changeInCitizenshipType');
  boolean addSpouse = getCOPServiceValue(identity, 'addSpouse');
  boolean removeSpouse = getCOPServiceValue(identity, 'removeSpouse');
  boolean changeDetailsOfFather = getCOPServiceValue(identity, 'changeDetailsOfFather');
  boolean changeDetailsOfMother = getCOPServiceValue(identity, 'changeDetailsOfMother');
  if( ageCode == 'KER-MSD-151' ) { return "KER-MSD-151"; }

  
 if(userCase==Renewal)
  {
    return "001";
  }
  else if(userCase==Update){
	String result = "";
    if(addingName || removingName || changeOrderOfNames || completeChangeofName){
        result += "700,";
    }
	if(changeOfDateOfBirth) {
		result += "701,";
	}
	if(changeInPlaceOfResidence) {
		result += "702,";
	}
	if(changeInPlaceOfBirth) {
		if(ageCop > 17) {
			result += "703,";
		}
		else {
			result += "704,";
		}
	}
	if(changeInPlaceOfOrigin) {
		if(ageCop > 17) {
			result += "705,";
		}
		else {
			result += "706,";
		}
	}
	if(changeInCitizenshipType) {
		result += "707,";
	}
	if(addSpouse) {
		result += "708,";
	}
	if(removeSpouse) {
		result += "709,";
	}
	if(changeDetailsOfFather || changeDetailsOfMother) {
		result += "710,";
	}
	if (result.endsWith(",")) {
		result = result.substring(0, result.length() - 1);
	}
	
	return result;
  }
  else if((citizenshipType==ByBirthIndigenousCommunity || citizenshipTypeCode == ByBirthIndigenousCommunity) && ageCode == ADULT && !(foundLink))
  {
    return "600";
  }
  else if((citizenshipType==ByBirthIndigenousCommunity || citizenshipTypeCode == ByBirthIndigenousCommunity) && ageCode != ADULT && !(foundLink))
  {
    return "605";
  }
  else if((citizenshipType==ByArticleNine || citizenshipTypeCode == ByArticleNine) && !(foundLink))
  {
    return "601";
  } 
  else if((citizenshipType==ByNaturalisation || citizenshipTypeCode == ByNaturalisation) && !(foundLink))
  {
    return "602";
  } 
  else if((citizenshipType==ByRegistration || citizenshipTypeCode == ByRegistration) && !(foundLink))
  {
    return "603";
  } 
  else if((citizenshipType==dualCitizenship || citizenshipTypeCode == dualCitizenship) && !(foundLink))
  {
    return "604";
  }  
  else if(foundLink)
  {
    return "606";
  } 
  else if(userCase==Lost)
  {
    return "002";
  }  
  else if(userCase==Update  && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
   return "003";
  }
  else if(userCase==Update && (fatherNIN != null || motherNIN !=null) && ageCode == CHILD  )
  {
   return "022";
  }
 else if(userCase==Update  && fatherNIN==null && motherNIN==null && ageCode == MINOR  )
  {
   return "021";
  }

else if(userCase==Update  && (fatherNIN != null || motherNIN !=null) && ageCode == MINOR  )
  {
   return "023";
  }

  else if(userCase==Update  && fatherNIN==null && motherNIN==null && ageCode == ADULT  )
  {
    return "004";
  } 
else if( userCase==New && citizenshipType==ByBirthIndigenousCommunity && fatherNIN==null && motherNIN==null && ageCode == CHILD && foundLink )
  {
    return "034";
  } 
else if(userCase==Update  && (fatherNIN != null || motherNIN !=null) && ageCode == ADULT  )
  {
   return "024";
  }
  else if(userCase==New && citizenshipType==null && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
   return "033";
  }
  else if(userCase==New && citizenshipType==ByBirthIndigenousCommunity && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
   return "005";
  }
  else if(userCase==New && citizenshipType==ByBirthIndigenousCommunity && fatherNIN==null && motherNIN==null && ageCode == MINOR  )
  {
   return "025";
  }

  else if(userCase==New && citizenshipType==ByBirthIndigenousCommunity && (fatherNIN != null || motherNIN !=null)   && ageCode == MINOR  )
  {
   return "026";
  }


  else if(userCase==New && citizenshipType==ByBirthIndigenousCommunity && fatherNIN==null && motherNIN==null && ageCode == ADULT  )
  {
    return "006";
  } 
     else if(userCase==New && citizenshipType==ByBirthIndigenousCommunity && (fatherNIN != null || motherNIN !=null)   && ageCode == CHILD  )
  {
   return "007";
  }

 

  else if(userCase==New && citizenshipType==ByBirthIndigenousCommunity && (fatherNIN != null || motherNIN !=null)  && ageCode == ADULT  )
  {
    return "008";
  } 

  else if(userCase==New && citizenshipType==ByNaturalisation && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
   return "009";
  }
  else if(userCase==New && citizenshipType==ByNaturalisation && fatherNIN==null && motherNIN==null && ageCode == MINOR  )
  {
   return "027";
  }
  else if(userCase==New && citizenshipType==ByNaturalisation && fatherNIN==null && motherNIN==null && ageCode == ADULT  )
  {
    return "010";
  } 
  
  else if(userCase==New && citizenshipType==ByNaturalisation && (fatherNIN != null || motherNIN !=null)   && ageCode == CHILD  )
  {
   return "011";
  }

  else if(userCase==New && citizenshipType==ByNaturalisation && (fatherNIN != null || motherNIN !=null)   && ageCode == MINOR  )
  {
   return "028";
  }
  else if(userCase==New && citizenshipType==ByNaturalisation && (fatherNIN != null || motherNIN !=null)  && ageCode == ADULT  )
  {
    return "012";
  } 

   else if(userCase==New && citizenshipType==ByRegistration && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
   return "013";
  }
else if(userCase==New && citizenshipType==ByRegistration && (fatherNIN != null || motherNIN !=null)   && ageCode == CHILD  )
  {
   return "015";
  }
   else if(userCase==New && citizenshipType==ByRegistration && fatherNIN==null && motherNIN==null && ageCode == MINOR  )
  {
   return "029";
  }
  else if(userCase==New && citizenshipType==ByRegistration && (fatherNIN != null || motherNIN !=null)   && ageCode == MINOR  )
  {
   return "030";
  }
  else if(userCase==New && citizenshipType==ByRegistration && fatherNIN==null && motherNIN==null && ageCode == ADULT  )
  {
    return "014";
  } 
  
  
  else if(userCase==New && citizenshipType==ByRegistration && (fatherNIN != null || motherNIN !=null)  && ageCode == ADULT  )
  {
    return "016";
  } 
   else if(userCase==New && citizenshipType==dualCitizenship && fatherNIN==null && motherNIN==null && ageCode == CHILD  )
  {
   return "017";
  }
 else if(userCase==New && citizenshipType==dualCitizenship && fatherNIN==null && motherNIN==null && ageCode == MINOR  )
  {
   return "031";
  }

 else if(userCase==New && citizenshipType==dualCitizenship && (fatherNIN != null || motherNIN !=null)   && ageCode == MINOR  )
  {
   return "032";
  }

  else if(userCase==New && citizenshipType==dualCitizenship && fatherNIN==null && motherNIN==null && ageCode == ADULT  )
  {
    return "018";
  } 
  else if(userCase==New && citizenshipType==dualCitizenship && (fatherNIN != null || motherNIN !=null)   && ageCode == CHILD  )
  {
   return "019";
  }
  else if(userCase==New && citizenshipType==dualCitizenship && (fatherNIN != null || motherNIN !=null)  && ageCode == ADULT  )
  {
    return "020";
  } 
  
  else {
    return "000";
  }
}
